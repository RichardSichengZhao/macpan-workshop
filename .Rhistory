Q8A_result <- entrez_search(db="pubmed", term=query_Q8A, retmax=10000)
length(Q8A_result$ids)
Q8A_ids<-Q8A_result$ids
TargetList[TargetList %in% Q8A_ids]
TargetList[TargetList %in% Q7A_ids]
query_Q8 <- "(epidem* OR disease OR infect*) AND (dynam* OR equilibri*) AND (inciden* OR susceptib* OR spread OR transmission) AND (hetero* OR variation OR nonlinear OR non-linear)"
query_Q8A <- paste(query_Q8, query_Author, sep=" ")
Q8_result <- entrez_search(db="pubmed", term=query_Q8, retmax=10000)
length(Q8_result$ids)
Q8_result$count
Q8A_result <- entrez_search(db="pubmed", term=query_Q8A, retmax=10000)
length(Q8A_result$ids)
Q8A_ids<-Q8A_result$ids
TargetList[TargetList %in% Q8A_ids]
query_Q8 <- "(epidem* OR disease OR infect*) AND (dynam* OR equilibri*) AND (inciden* OR susceptib* OR spread OR transmission) AND (hetero* OR variation OR nonlinear OR non-linear)"
query_Q8A <- paste(query_Q8, query_Author, sep=" ")
Q8_result <- entrez_search(db="pubmed", term=query_Q8, retmax=10000)
length(Q8_result$ids)
Q8_result$count
Q8A_result <- entrez_search(db="pubmed", term=query_Q8A, retmax=10000)
length(Q8A_result$ids)
Q8A_ids<-Q8A_result$ids
TargetList[TargetList %in% Q8A_ids]
query_Q8 <- "(epidem* OR disease OR infect*) AND (dynam* OR equilibri*) AND (inciden* OR susceptib* OR spread OR transmission) AND (hetero* OR nonlinear OR non-linear)"
query_Q8A <- paste(query_Q8, query_Author, sep=" ")
Q8_result <- entrez_search(db="pubmed", term=query_Q8, retmax=10000)
length(Q8_result$ids)
Q8_result$count
Q8A_result <- entrez_search(db="pubmed", term=query_Q8A, retmax=10000)
length(Q8A_result$ids)
Q8A_ids<-Q8A_result$ids
TargetList[TargetList %in% Q8A_ids]
query_Q8 <- "(epidem* OR disease OR infect*) AND (dynam* OR equilibri*) AND (inciden* OR susceptib* OR spread OR transmission) AND (hetero* OR variation OR nonlinear OR non-linear)"
query_Q8A <- paste(query_Q8, query_Author, sep=" ")
Q8_result <- entrez_search(db="pubmed", term=query_Q8, retmax=10000)
length(Q8_result$ids)
Q8_result$count
Q8A_result <- entrez_search(db="pubmed", term=query_Q8A, retmax=10000)
query_Q8 <- "(epidem* OR disease OR infect*) AND (dynam* OR equilibri*) AND (inciden* OR susceptib* OR spread OR transmission OR variation) AND (hetero*  OR nonlinear OR non-linear)"
query_Q8A <- paste(query_Q8, query_Author, sep=" ")
Q8_result <- entrez_search(db="pubmed", term=query_Q8, retmax=10000)
length(Q8_result$ids)
Q8_result$count
Q8A_result <- entrez_search(db="pubmed", term=query_Q8A, retmax=10000)
length(Q8A_result$ids)
Q8A_ids<-Q8A_result$ids
TargetList[TargetList %in% Q8A_ids]
query_Q8 <- "(epidem* OR disease OR infect*) AND (dynam* OR equilibri*) AND (inciden* OR susceptib* OR spread OR transmission) AND (hetero* OR (individual variation) OR nonlinear OR non-linear)"
query_Q8A <- paste(query_Q8, query_Author, sep=" ")
Q8_result <- entrez_search(db="pubmed", term=query_Q8, retmax=10000)
length(Q8_result$ids)
Q8_result$count
Q8A_result <- entrez_search(db="pubmed", term=query_Q8A, retmax=10000)
length(Q8A_result$ids)
Q8A_ids<-Q8A_result$ids
TargetList[TargetList %in% Q8A_ids]
Q8_ids<-Q8_result$ids
Q8A_result <- entrez_search(db="pubmed", term=query_Q8A, retmax=10000)
TargetList[TargetList %in% Q8_ids]
query_Q9 <- "(epidem* OR disease OR infect*) AND (dynam* OR equilibri*) AND (inciden* OR susceptib* OR spread OR transmission) AND (hetero* OR (individual variation) OR nonlinear OR non-linear)"
query_Q9A <- paste(query_Q9, query_Author, sep=" ")
Q9_result <- entrez_search(db="pubmed", term=query_Q9, retmax=10000)
length(Q9_result$ids)
Q9_result$count
Q9_ids<-Q9_result$ids
TargetList[TargetList %in% Q9_ids]
query_Q9 <- "(epidem* OR disease OR infect*) AND (dynam* OR equilibri*) AND (inciden* OR susceptib* OR spread OR transmission) AND (hetero* OR (individual variation) OR nonlinear OR non-linear)"
query_Q9A <- paste(query_Q9, query_Author, sep=" ")
Q9_result <- entrez_search(db="pubmed", term=query_Q9, retmax=10000)
length(Q9_result$ids)
Q9_result$count
query_Q9 <- "(epidem* OR disease OR infect*) AND (dynam* OR equilibri*) AND (inciden* OR susceptib* OR spread OR transmission) AND (hetero* OR (individual variation) OR nonlinear OR non-linear) AND network"
query_Q9A <- paste(query_Q9, query_Author, sep=" ")
Q9_result <- entrez_search(db="pubmed", term=query_Q9, retmax=10000)
length(Q9_result$ids)
Q9_result$count
Q9_ids<-Q9_result$ids
TargetList[TargetList %in% Q9_ids]
r_vals <- seq(-3, 3, by = 0.02)
t_vals <- seq(0, 1000, by = 1)
p_vals <- matrix(NA, nrow = length(r_vals), ncol = length(t_vals))
p_init <- 0.25
p_vals[,1] <- p_init
for (r in 1:length(r_vals)) {
for (t in 1:(length(t_vals) - 1)) {
p_vals[r,t+1] <- p_vals[r,t] + r_vals[r]*(1 - p_vals[r,t])*p_vals[r,t]
}
}
plot(rep(r_vals[1], 100), p_vals[1,902:1001], type = "p", xlim = c(-3, 3),
ylim = c(-0.4, 1.4), xlab = "r", ylab = "p*")
for (r in 2:length(r_vals)) {
points(rep(r_vals[r], 100), p_vals[r,902:1001])
}
r_vals <- seq(-3, 3, by = 0.01)
t_vals <- seq(0, 1000, by = 1)
p_vals <- matrix(NA, nrow = length(r_vals), ncol = length(t_vals))
p_init <- 0.25
p_vals[,1] <- p_init
for (r in 1:length(r_vals)) {
for (t in 1:(length(t_vals) - 1)) {
p_vals[r,t+1] <- p_vals[r,t] + r_vals[r]*(1 - p_vals[r,t])*p_vals[r,t]
}
}
plot(rep(r_vals[1], 100), p_vals[1,902:1001], type = "p", xlim = c(-3, 3),
ylim = c(-0.4, 1.4), xlab = "r", ylab = "p*")
for (r in 2:length(r_vals)) {
points(rep(r_vals[r], 100), p_vals[r,902:1001])
}
knitr::opts_chunk$set(echo = TRUE)
r_vals <- seq(-3, 3, by = 0.01)
t_vals <- seq(0, 1000, by = 1)
p_vals <- matrix(NA, nrow = length(r_vals), ncol = length(t_vals))
p_init <- 0.25
p_vals[,1] <- p_init
for (r in 1:length(r_vals)) {
for (t in 1:(length(t_vals) - 1)) {
p_vals[r,t+1] <- p_vals[r,t] + r_vals[r]*(1 - p_vals[r,t])*p_vals[r,t]
}
}
plot(rep(r_vals[1], 100), p_vals[1,902:1001], type = "p", xlim = c(-3, 3),
ylim = c(-0.4, 1.4), xlab = "r", ylab = "p*")
for (r in 2:length(r_vals)) {
points(rep(r_vals[r], 100), p_vals[r,902:1001])
}
sir |> mp_print_during()
library(macpan2) ## obviously
library(ggplot2)
library(dplyr)
library(lubridate)
sir <- mp_tmb_library("starter_models","sir", package = "macpan2")
sir |> print()
## Simulation and plot of SIR model
(sir
# simulation
|> mp_simulator(
time_steps = 100
,outputs = c("I", "infection")
)
# formating data to long format for figure
|> mp_trajectory()
# Rename models
|> mutate(quantity=case_match( matrix
, "I" ~ "Prevalence"
, "infection" ~ "Incidence"
)
)
# plot with ggplot
|> ggplot()
+ geom_line(aes(time,value))
+ facet_wrap(~ quantity,scales = "free")
+ theme_bw()
) |> print()
## create box diagrams from model
mp_print_during(sir)
## show the flow diagram
system.file("utils", "box-drawing.R", package = "macpan2") |> source()
layout <- mp_layout_paths(sir)
plot_flow_diagram(layout,show_flow_rates = TRUE)
sir |> mp_print_during()
## Model Specification to Explicit Dynamics
sir |> mp_print_during()
sir |> mp_expand()
sir |> mp_expand() |> mp_print_during()
sir |> mp_rk4()
sir |> mp_rk4() |> mp_expand()
sir |> mp_rk4() |> mp_expand() |> mp_print_during()
## Euler-multinational distribution (model with process error)
sir |> mp_euler_multinomial() |> mp_expand() |> mp_print_during()
## Euler-multinational distribution (model with process error)
sir |> mp_euler_multinomial()
## Euler-multinational distribution (model with process error)
sir |> mp_euler_multinomial() |> mp_expand()
## Euler-multinational distribution (model with process error)
sir |> mp_euler_multinomial() |> mp_expand() |> mp_print_during()
## Manually construct an SEIR
seir = mp_tmb_model_spec(
q
end()
## Manually construct an SEIR
seir = mp_tmb_model_spec(
before = S ~ N - I - E - R    # Initial state
, during = list(                # List is not used in SIR case
mp_per_capita_flow(
from     = "S"            # compartment from which individuals flow
, to       = "I"            # compartment to which individuals flow
, rate     = "beta * I / N" # expression giving per-capita flow rate
, abs_rate = "exposure"     # name of absolute flow rate = beta * I * S/N
)
, mp_per_capita_flow(
from     = "E"
, to       = "I"
, rate     = "alpha"
, abs_rate = "infection"
)
, mp_per_capita_flow(
from     = "I"
, to       = "R"
, rate     = "gamma"
, abs_rate = "recovery"
)
)
, default = list(  N = 100
, I = 1
, E = 0
, R = 0
, beta = 0.25
, alpha = 0.5
, gamma = 0.1
)
)
print(seir)
seir |> mp_expand() |> mp_print_during()
layout <- mp_layout_paths(seir)
plot_flow_diagram(layout,show_flow_rates = TRUE)
## Manually construct an SEIR
seir = mp_tmb_model_spec(
before = S ~ N - I - E - R    # Initial state
, during = list(                # List is not used in SIR case
mp_per_capita_flow(
from     = "S"            # compartment from which individuals flow
, to       = "E"            # compartment to which individuals flow
, rate     = "beta * I / N" # expression giving per-capita flow rate
, abs_rate = "exposure"     # name of absolute flow rate = beta * I * S/N
)
, mp_per_capita_flow(
from     = "E"
, to       = "I"
, rate     = "alpha"
, abs_rate = "infection"
)
, mp_per_capita_flow(
from     = "I"
, to       = "R"
, rate     = "gamma"
, abs_rate = "recovery"
)
)
, default = list(  N = 100
, I = 1
, E = 0
, R = 0
, beta = 0.25
, alpha = 0.5
, gamma = 0.1
)
)
seir |> mp_expand() |> mp_print_during()
layout <- mp_layout_paths(seir)
plot_flow_diagram(layout,show_flow_rates = TRUE)
## Modifying models
my_sir_dir = file.path(tempdir(), "my_seir")
## Modifying models
my_seir_dir = file.path(tempdir(), "my_seir")
## Modifying models
my_seir_dir = file.path(tempdir(), "my_seir")
print(my_seir_dir)
## Modifying models
getwd()
library(macpan2) ## obviously
library(ggplot2)
library(dplyr)
library(lubridate)
sir <- mp_tmb_library("starter_models","sir", package = "macpan2")
sir |> print()
## Simulation and plot of SIR model
(sir
# simulation
|> mp_simulator(
time_steps = 100
,outputs = c("I", "infection")
)
# formating data to long format for figure
|> mp_trajectory()
# Rename models
|> mutate(quantity=case_match( matrix
, "I" ~ "Prevalence"
, "infection" ~ "Incidence"
)
)
# plot with ggplot
|> ggplot()
+ geom_line(aes(time,value))
+ facet_wrap(~ quantity,scales = "free")
+ theme_bw()
) |> print()
## create box diagrams from model
mp_print_during(sir)
## show the flow diagram
system.file("utils", "box-drawing.R", package = "macpan2") |> source()
layout <- mp_layout_paths(sir)
plot_flow_diagram(layout,show_flow_rates = TRUE)
## Model Specification to Explicit Dynamics
sir |> mp_print_during()
sir |> mp_expand() |> mp_print_during()
## Runge Kutta 4 ODE solver
sir |> mp_rk4() |> mp_expand() |> mp_print_during()
## Euler-multinational distribution (model with process error)
sir |> mp_euler_multinomial() |> mp_expand() |> mp_print_during()
## Manually construct an SEIR
seir = mp_tmb_model_spec(
before = S ~ N - I - E - R    # Initial state
, during = list(                # List is not used in SIR case
mp_per_capita_flow(
from     = "S"            # compartment from which individuals flow
, to       = "E"            # compartment to which individuals flow
, rate     = "beta * I / N" # expression giving per-capita flow rate
, abs_rate = "exposure"     # name of absolute flow rate = beta * I * S/N
)
, mp_per_capita_flow(
from     = "E"
, to       = "I"
, rate     = "alpha"
, abs_rate = "infection"
)
, mp_per_capita_flow(
from     = "I"
, to       = "R"
, rate     = "gamma"
, abs_rate = "recovery"
)
)
, default = list(  N = 100
, I = 1
, E = 0
, R = 0
, beta = 0.25
, alpha = 0.5
, gamma = 0.1
)
)
layout <- mp_layout_paths(seir)
plot_flow_diagram(layout,show_flow_rates = TRUE)
seir |> mp_expand() |> mp_print_during()
## Modifying models
my_seir_dir = file.path(tempdir(), "my_seir")
## Modifying models
getwd()
library(macpan2) ## obviously
library(ggplot2)
library(dplyr)
library(lubridate)
sir <- mp_tmb_library("starter_models","sir", package = "macpan2")
sir |> print()
## Simulation and plot of SIR model
(sir
# simulation
|> mp_simulator(
time_steps = 100
,outputs = c("I", "infection")
)
# formating data to long format for figure
|> mp_trajectory()
# Rename models
|> mutate(quantity=case_match( matrix
, "I" ~ "Prevalence"
, "infection" ~ "Incidence"
)
)
# plot with ggplot
|> ggplot()
+ geom_line(aes(time,value))
+ facet_wrap(~ quantity,scales = "free")
+ theme_bw()
) |> print()
## create box diagrams from model
mp_print_during(sir)
## show the flow diagram
system.file("utils", "box-drawing.R", package = "macpan2") |> source()
layout <- mp_layout_paths(sir)
plot_flow_diagram(layout,show_flow_rates = TRUE)
## Model Specification to Explicit Dynamics
sir |> mp_print_during()
sir |> mp_expand() |> mp_print_during()
## Runge Kutta 4 ODE solver
sir |> mp_rk4() |> mp_expand() |> mp_print_during()
## Euler-multinational distribution (model with process error)
sir |> mp_euler_multinomial() |> mp_expand() |> mp_print_during()
## Manually construct an SEIR
seir = mp_tmb_model_spec(
before = S ~ N - I - E - R    # Initial state
, during = list(                # List is not used in SIR case
mp_per_capita_flow(
from     = "S"            # compartment from which individuals flow
, to       = "E"            # compartment to which individuals flow
, rate     = "beta * I / N" # expression giving per-capita flow rate
, abs_rate = "exposure"     # name of absolute flow rate = beta * I * S/N
)
, mp_per_capita_flow(
from     = "E"
, to       = "I"
, rate     = "alpha"
, abs_rate = "infection"
)
, mp_per_capita_flow(
from     = "I"
, to       = "R"
, rate     = "gamma"
, abs_rate = "recovery"
)
)
, default = list(  N = 100
, I = 1
, E = 0
, R = 0
, beta = 0.25
, alpha = 0.5
, gamma = 0.1
)
)
layout <- mp_layout_paths(seir)
plot_flow_diagram(layout,show_flow_rates = TRUE)
seir |> mp_expand() |> mp_print_during()
## Modifying models
my_seir_dir = file.path(tempdir(), "my_seir")
getwd()
## Modifying models
setwd("D:/GitHub/RZ_macpan_workshop/Workshop.R")
## Modifying models
getwd()
## Modifying models
getwd()
setwd("D:/GitHub/RZ_macpan_workshop")
## Modifying models
getwd()
## Modifying models
dir.create(file.path(getwd(),"macpan-workshop-library"), showWarnings =  F)
## Modifying models
dir.create(file.path(getwd(),"macpan-workshop-library"), showWarnings =  F)
my_seir_dir = file.path(getwd(), "macpan-workshop-library")
mp_model_starter("seir", my_seir_dir)
## Modifying models
#dir.create(file.path(getwd(),"macpan-workshop-library"), showWarnings =  F)
my_seir_dir = file.path(getwd(), "macpan-workshop-library")
mp_model_starter("seir", my_seir_dir)
mp_model_starter("sir", my_seir_dir)
## Modifying models
#dir.create(file.path(getwd(),"macpan-workshop-library"), showWarnings =  F)
my_seir_dir = file.path(getwd(), "macpan-workshop-library")
mp_model_starter("sir", my_seir_dir)
## Modifying models
#dir.create(file.path(getwd(),"macpan-workshop-library"), showWarnings =  F)
my_seir_dir = file.path(getwd(), "macpan-workshop-library")
mp_model_starter("sir", my_seir_dir)
## Modifying models
#dir.create(file.path(getwd(),"macpan-workshop-library"), showWarnings =  F)
my_seir_dir = file.path(getwd(), "macpan-workshop-library")
## Modifying models
#dir.create(file.path(getwd(),"macpan-workshop-library"), showWarnings =  F)
my_seir_dir = file.path(getwd(), "macpan-workshop-library")
mp_model_starter("sir", my_seir_dir)
mp_model_starter("sir", my_seir_dir)
mp_model_starter("seir", my_seir_dir)
# Create a library with a template model from SIR
my_seir_dir = file.path(getwd(), "macpan-workshop-library")
mp_model_starter("sir", my_seir_dir)
# Create a library with a template model from SIR
my_lib_dir = file.path(getwd(), "macpan-workshop-library")
mp_model_starter("sir", my_lib_dir)
my_seir = mp_tmb_library(my_lib_dir)
### Create temporary template based on SIR
mp_model_starter("sir", my_si_dir)
### Name template directory
my_seir_dir = file.path(my_lib_dir,"seir")
my_si_dir = file.path(my_lib_dir,"si")
### Create temporary template based on SIR
mp_model_starter("sir", my_si_dir)
mp_model_starter("seir", my_seir_dir)
## Create a library with a template model from SIR
### library directory
my_lib_dir = file.path(getwd(), "macpan-workshop-library")
### Name template directory
my_seir_dir = file.path(my_lib_dir,"seir")
my_si_dir = file.path(my_lib_dir,"si")
### Create temporary template based on SIR
mp_model_starter("sir", my_si_dir)
mp_model_starter("seir", my_seir_dir)
### Create temporary template based on existing library model
mp_model_starter("si", my_si_dir)
my_seir = mp_tmb_library(my_seir_dir)
print(my_seir)
my_seir |> mp_expand()
my_seir |> mp_expand() |> mp_print_during()
my_si = mp_tmb_library(my_si_dir)
my_si |> mp_expand() |> mp_print_during()
my_si |> mp_expand() |> mp_print_during()
my_si
mp_tmb_update(my_si
, phase="during",
, at = 1,
, expressions = list(
mp_per_capita_flow(  from = "S"
, to = "I"
, rate = "beta * I * (S/N)^zeta"
, abs_rate = "infection"
)
)
, default = list (zeta = 1)
)
my_si |> mp_expand() |> mp_print_during()
new_si <- mp_tmb_update(my_si
, phase="during",
, at = 1,
, expressions = list(
mp_per_capita_flow(  from = "S"
, to = "I"
, rate = "beta * I * (S/N)^zeta"
, abs_rate = "infection"
)
)
, default = list (zeta = 1)
)
new_si |> mp_expand() |> mp_print_during()
